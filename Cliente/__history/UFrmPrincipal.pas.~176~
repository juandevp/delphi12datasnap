unit UFrmPrincipal;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes,
  System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs,
  FMX.Controls.Presentation, FMX.Edit, REST.Backend.ServiceTypes, System.JSON,
  REST.Backend.EMSServices, FMX.StdCtrls, Data.Bind.Components,
  Data.Bind.ObjectScope, REST.Client, REST.Backend.EndPoint,
  REST.Backend.EMSProvider, REST.Types, REST.JSON, FMX.DateTimeCtrls,
  FMX.ListBox, Data.DB, Datasnap.DBClient, REST.Response.Adapter,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, System.Generics.Collections,
  UEmpleado;

type
  TForm2 = class(TForm)
    EdNombres: TEdit;
    EdApellidos: TEdit;
    LblNombres: TLabel;
    LblApellidos: TLabel;
    Button1: TButton;
    rsEmpleado: TRESTResponse;
    rsrEmpleado: TRESTRequest;
    rscEmpleado: TRESTClient;
    deFechaIngreso: TDateEdit;
    EdIdentificacion: TEdit;
    LblFechaIngreso: TLabel;
    LblIdentificacion: TLabel;
    LblCargo: TLabel;
    EdCargo: TEdit;
    cbListaDependencia: TComboBox;
    LblDependencia: TLabel;
    rsrListaDependencias: TRESTRequest;
    RESTClient1: TRESTClient;
    rsListaDependencias: TRESTResponse;
    rsdsaListaDependencias: TRESTResponseDataSetAdapter;
    FDMemTable1: TFDMemTable;

    procedure Button1Click(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
  private
    FListaDependencias: TObjectList<TDependencia>;
    procedure LlenarComboDependencia;
    function ObtenerDependenciaId(ANombreDependencia: string): Integer;
    function DescomponerResultado(AJsonValue: TJSONValue): TJSONValue;
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form2: TForm2;

implementation

{$R *.fmx}

procedure TForm2.FormCreate(Sender: TObject);
begin
  FListaDependencias := TObjectList<TDependencia>.Create;
end;

procedure TForm2.FormDestroy(Sender: TObject);
begin
  FListaDependencias.Free;
end;

procedure TForm2.FormShow(Sender: TObject);

begin
  LlenarComboDependencia;
end;

function TForm2.DescomponerResultado(AJsonValue: TJSONValue): TJSONValue;
begin
  Result := AJsonValue.GetValue<TJSONArray>('result')[0];
end;

procedure TForm2.LlenarComboDependencia;
var
  ListaDependencias: TJSONArray;
  Value: TJSONValue;
begin
  //
  FListaDependencias.Clear;
  rsrListaDependencias.Execute;
  ListaDependencias := DescomponerResultado(rsListaDependencias.JSONValue)
    .GetValue<TJSONArray>;

  for Value in ListaDependencias do
  begin
    var
    Dependencia := TDependencia.Create(Value.GetValue<Integer>('dep_nid'),
      Value.GetValue<string>('dep_nombredependencia'));
    FListaDependencias.Add(Dependencia);
    cbListaDependencia.Items.Add(Dependencia.dep_nombredependencia);
  end;

end;

function TForm2.ObtenerDependenciaId(ANombreDependencia: string): Integer;
var
  Dependencia: TDependencia;
begin
  for Dependencia in FListaDependencias do
  begin
    if Dependencia.dep_nombredependencia = ANombreDependencia then
    begin
      Result := Dependencia.dep_nid;
      Break;
    end;
  end;
end;

procedure TForm2.Button1Click(Sender: TObject);
var
  Empleado: TEmpleado;
  JSONEmpleado: string;
begin
  //
  Empleado := TEmpleado.Create;
  try
    Empleado.fun_cidentificacion := EdIdentificacion.Text;
    Empleado.fun_cnombres := EdNombres.Text;
    Empleado.fun_capellidos := EdApellidos.Text;
    Empleado.fun_cargo := EdCargo.Text;
    Empleado.fun_dep_nid := ObtenerDependenciaId(cbListaDependencia.Text);
    Empleado.fun_fecha_ingreso := deFechaIngreso.Text;
    JSONEmpleado := TJson.ObjectToJsonString(Empleado, [joSerialFields]);
    rsrEmpleado.Body.ClearBody;
    rsrEmpleado.Body.Add(JSONEmpleado, TRESTContentType.ctAPPLICATION_JSON);
    rsrEmpleado.Execute;
    ShowMessage(DescomponerResultado(rsEmpleado.JSONValue).GetValue<string>);
  finally
    Empleado.Free;
  end;
end;

end.
